// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package sqlc

import (
	"context"
)

const createRole = `-- name: CreateRole :one
INSERT INTO role (
        endpoint,
        operation,
        bucket_size,
        add_token_per_sec,
        initial_tokens
    ) VALUES (
             ?, ?, ?, ?, ?
         )
    RETURNING id, endpoint, operation, bucket_size, add_token_per_sec, initial_tokens, created_at, updated_at, deleted_at
`

type CreateRoleParams struct {
	Endpoint       string
	Operation      string
	BucketSize     int64
	AddTokenPerSec int64
	InitialTokens  int64
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.db.QueryRowContext(ctx, createRole,
		arg.Endpoint,
		arg.Operation,
		arg.BucketSize,
		arg.AddTokenPerSec,
		arg.InitialTokens,
	)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Endpoint,
		&i.Operation,
		&i.BucketSize,
		&i.AddTokenPerSec,
		&i.InitialTokens,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getRoles = `-- name: GetRoles :many
SELECT id, endpoint, operation, bucket_size, add_token_per_sec, initial_tokens, created_at, updated_at, deleted_at FROM role
WHERE deleted_at = null
`

func (q *Queries) GetRoles(ctx context.Context) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, getRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.Endpoint,
			&i.Operation,
			&i.BucketSize,
			&i.AddTokenPerSec,
			&i.InitialTokens,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
